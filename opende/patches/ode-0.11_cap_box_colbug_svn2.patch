Index: ode/src/capsule.cpp
===================================================================
--- ode/src/capsule.cpp	(revision 1841)
+++ ode/src/capsule.cpp	(working copy)
@@ -160,19 +160,41 @@
   return dCollideSpheres (p,ccyl->radius,o2->final_posr->pos,sphere->radius,contact);
 }
 
-// use this instead of dCollideSpheres if the spheres are at the same point, 
-//  but the normal is known (e.g. in capsule-box collision)
-int dCollideSpheresZeroDist (dVector3 p1, dReal r1, dVector3 p2, dReal r2, 
-                             dVector3 normal, dContactGeom *c) {
-  c->normal[0] = normal[0];
-  c->normal[1] = normal[1];
-  c->normal[2] = normal[2];
-  c->depth  = r1 + r2;
-  dReal k = REAL(0.5) * (r2 - r1);
-  c->pos[0] = p1[0] + c->normal[0]*k;
-  c->pos[1] = p1[1] + c->normal[1]*k;
-  c->pos[2] = p1[2] + c->normal[2]*k;
-  return 1;
+// finds the closest box face for a point t. The box is given by 
+// its position pos, rotation R, and halfsides.
+// The point t is considered in local coordinates of the box if local=1, otherwise it is
+//  transformed.
+// Returns the index of the surface. The depth and surface normals are set too.
+int dClosestBoxFace(dReal* depth, dVector3* normal, dVector3 halfsides, dVector3 pos, dReal *R, dVector3 t, int local){
+  if(!local){
+    dVector3 l;
+    int i;
+    for (i=0; i<3; i++) l[i] = t[i]-pos[i];    
+    // represent pl in terms of local box coordinates    
+    t[0] = dDOT14(l,R);
+    t[1] = dDOT14(l,R+1);
+    t[2] = dDOT14(l,R+2);
+  }
+  // sphere center inside box. find closest face to `t'
+  dReal min_distance = halfsides[0] - dFabs(t[0]);
+  int mini = 0;
+  for (int i=1; i<3; i++) {
+    dReal face_distance = halfsides[i] - dFabs(t[i]);
+    if (face_distance < min_distance) {
+      min_distance = face_distance;
+      mini = i;
+    }
+  }
+  // contact normal points to closest face
+  dVector3 tmp;
+  tmp[0] = 0;
+  tmp[1] = 0;
+  tmp[2] = 0;
+  tmp[mini] = (t[mini] > 0) ? REAL(1.0) : REAL(-1.0);
+  dMULTIPLY0_331 (*normal,R,tmp);
+  // contact depth = distance to wall along normal
+  *depth = min_distance;
+  return mini;
 }
 
 int dCollideCapsuleBox (dxGeom *o1, dxGeom *o2, int flags,
@@ -212,18 +234,24 @@
   dClosestLineBoxPoints (p1,p2,c,R,side,pl,pb);
 
   // if the capsule is penetrated further than radius 
-  //  than pl and pb are equal -> unknown normal
-  // use vector to center of box as normal
+  //  then pl and pb are equal (up to eps) -> unknown normal
+  // use normal vector of closest box surface
 #ifdef dSINGLE
   dReal mindist = REAL(1e-9);
 #else
   dReal mindist = REAL(1e-18);
 #endif
   if (dCalcPointsDistance3(pl, pb)<mindist) {
-    dVector3 normal; // pb-c (vector from center of box to pb)
-    for (int i=0; i<3; i++) normal[i] = pb[i]-c[i];
-    dSafeNormalize3(normal);
-    return dCollideSpheresZeroDist (pl,radius,pb,0,normal,contact);
+    dVector3 halfsides;
+    int i;
+    for (i=0; i<3; i++) halfsides[i] = side[i]*REAL(0.5);
+    dClosestBoxFace(&(contact->depth), &(contact->normal),
+                    halfsides, c, R, pl, 0);                    
+    contact->depth+= radius;
+    contact->pos[0] = pb[0];
+    contact->pos[1] = pb[1];
+    contact->pos[2] = pb[2];
+    return 1;
   } else {
     // generate contact point
     return dCollideSpheres (pl,radius,pb,0,contact);
