diff -U 5 -r ode-0.11.1/ode/src/capsule.cpp ode-0.11.1-new/ode/src/capsule.cpp
--- ode-0.11.1/ode/src/capsule.cpp	2010-08-31 13:26:23.000000000 +0200
+++ ode-0.11.1-new/ode/src/capsule.cpp	2011-10-28 16:52:04.654733317 +0200
@@ -158,10 +158,27 @@
   p[2] = o1->final_posr->pos[2] + alpha * o1->final_posr->R[10];
   return dCollideSpheres (p,ccyl->radius,o2->final_posr->pos,sphere->radius,contact);
 }
 
 
+// use this instead of dCollideSpheres if the spheres are at the same point, 
+//  but the normal is known (e.g. in capsule-box collision)
+int dCollideSpheresZeroDist (dVector3 p1, dReal r1, dVector3 p2, dReal r2, 
+                             dVector3 normal, dContactGeom *c) {
+  dIASSERT (p1[0] == p2[0] && p1[1] == p2[1] && p1[2] == p2[2]);  
+  
+  c->normal[0] = normal[0];
+  c->normal[1] = normal[1];
+  c->normal[2] = normal[2];
+  c->depth  = r1 + r2;
+  dReal k = REAL(0.5) * (r2 - r1);
+  c->pos[0] = p1[0] + c->normal[0]*k;
+  c->pos[1] = p1[1] + c->normal[1]*k;
+  c->pos[2] = p1[2] + c->normal[2]*k;
+  return 1;
+}
+
 int dCollideCapsuleBox (dxGeom *o1, dxGeom *o2, int flags,
 			  dContactGeom *contact, int skip)
 {
   dIASSERT (skip >= (int)sizeof(dContactGeom));
   dIASSERT (o1->type == dCapsuleClass);
@@ -193,13 +210,23 @@
   const dReal *side = box->side;
 
   // get the closest point between the cylinder axis and the box
   dVector3 pl,pb;
   dClosestLineBoxPoints (p1,p2,c,R,side,pl,pb);
-
-  // generate contact point
-  return dCollideSpheres (pl,radius,pb,0,contact);
+  // if the capsule is penetrated further than radius 
+  //  than pl and pb are equal -> unknown normal
+  // use vector to center of box as normal
+  if(pl[0] == pb[0] && pl[1] == pb[1] && pl[2] == pb[2]){
+    dVector3 normal; // pb-c (vector from center of box to pb)
+    int i;
+    for (i=0; i<3; i++) normal[i] = pb[i]-c[i];
+    dNormalize3(normal);    
+    return dCollideSpheresZeroDist (pl,radius,pb,0,normal,contact);
+  }else{
+    // generate contact point
+    return dCollideSpheres (pl,radius,pb,0,contact);
+  }
 }
 
 
 int dCollideCapsuleCapsule (dxGeom *o1, dxGeom *o2,
 				int flags, dContactGeom *contact, int skip)
